name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff check
        run: ruff check src tests

      - name: Run ruff format
        run: ruff format --check src tests

      - name: Run mypy
        run: mypy src

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        env:
          OMP_NUM_THREADS: 1
          MKL_NUM_THREADS: 1
          MKL_SERVICE_FORCE_INTEL: 1
          SPECTRANS_DISABLE_MKL_FFT: 1
        run: pytest tests/unit -v --cov=spectrans --cov-report=xml --cov-report=term

      - name: Run integration tests
        env:
          OMP_NUM_THREADS: 1
          MKL_NUM_THREADS: 1
          MKL_SERVICE_FORCE_INTEL: 1
          SPECTRANS_DISABLE_MKL_FFT: 1
        run: pytest tests/integration -v

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run benchmarks
        env:
          OMP_NUM_THREADS: 1
          MKL_NUM_THREADS: 1
          MKL_SERVICE_FORCE_INTEL: 1
          SPECTRANS_DISABLE_MKL_FFT: 1
        run: |
          pytest tests/benchmarks/test_performance.py --benchmark-only --benchmark-json=benchmark.json

      # Benchmark results are displayed in the console output
      # To store benchmarks, create a gh-pages branch first

  memory-profile:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run memory profiling tests
        env:
          OMP_NUM_THREADS: 1
          MKL_NUM_THREADS: 1
          MKL_SERVICE_FORCE_INTEL: 1
          SPECTRANS_DISABLE_MKL_FFT: 1
        run: pytest tests/benchmarks/test_memory_profile.py -v

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          mkdocs build --strict

  # GPU tests are disabled as GitHub Actions doesn't provide GPU runners
  # To run GPU tests, use self-hosted runners with GPU support or run locally
  # gpu-tests:
  #   name: GPU Tests
  #   runs-on: [self-hosted, gpu]  # Requires self-hosted runner with GPU
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -e ".[dev]"
  #     - name: Run GPU tests
  #       run: |
  #         pytest tests -v -m "gpu" --tb=short
